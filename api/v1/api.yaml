definitions:
  BillingServer_OrderCreateRequest:
    properties:
      account:
        description: User unique account in the Project.
        type: string
        x-go-name: Account
      amount:
        description: Order amount
        format: double
        type: number
        x-go-name: Amount
      currency:
        description: Order currency by ISO 4217 (3 chars). If this field sent, then
          we're process amount in this currency.
        type: string
        x-go-name: Currency
      description:
        description: Object with any fields on the Project side that do not match
          the names of the reserved fields.
        type: string
        x-go-name: Description
      language:
        description: TODO
        type: string
      isJson:
        description: TODO
        type: boolean
      is_embedded:
        description: TODO
        type: boolean
        x-go-name: IsEmbedded
      issuer_url:
        description: TODO
        type: string
        x-go-name: IssuerUrl
      order:
        description: TODO
        type: string
        x-go-name: PspOrderUuid
      metadata:
        description: TODO
        type: object
        additionalProperties:
          type: string
      order_id:
        description: Unique order identifier in the Project. This field is not required,
          but we recommend sending this field always.
        type: string
        x-go-name: OrderId
      other:
        description: TODO
        type: object
        additionalProperties:
          type: string
      raw_params:
        description: TODO
        type: object
        additionalProperties:
          type: string
      raw_body:
        description: TODO
        type: string
      payer_email:
        description: user (payer) email.
        type: string
        x-go-name: PayerEmail
      payer_ip:
        description: user (payer) IP address.
        type: string
      payer_phone:
        description: user (payer) phone.
        type: string
        x-go-name: PayerPhone
      payment_method:
        description: Payment method identifier in the PaySuper payment solution.
        type: string
        x-go-name: PaymentMethod
      products:
        description: Unique identifiers of Products being in the Project.
        items:
          type: string
        type: array
        x-go-name: Products
      project:
        description: Project unique identifier in the PaySuper payment solution.
        type: string
        x-go-name: ProjectId
      receipt_number:
        description: TODO
        type: string
        x-go-name: ReceiptNumber
      receipt_url:
        description: TODO
        type: string
        x-go-name: ReceiptUrl
      region:
        description: user (payer) region code by ISO 3166-1 (2 chars) for check project
          packages. If this field not send, then user region will be get from user
          ip.
        type: string
        x-go-name: Region
      signature:
        description: Signature of the request to verify that the data has not been
          changed. This field is not required, but we recommend sending this field
          always.
        type: string
        x-go-name: Signature
      type:
        description: TODO
        type: string
        x-go-name: Type
      token:
        description: TODO
        type: string
      url_fail:
        description: URL for redirect user after failed payment. This field can be
          send if it allowed in project admin panel.
        type: string
        x-go-name: UrlFail
      url_notify:
        description: URL for payment notification request to project. This field can
          be send if it allowed in project admin panel.
        type: string
        x-go-name: UrlNotify
      url_success:
        description: URL for redirect user after successfully completed payment. This
          field can be send if it allowed in project admin panel.
        type: string
        x-go-name: UrlSuccess
      url_verify:
        description: URL for payment data verification request to project. This field
          can be send if it allowed in project admin panel.
        type: string
        x-go-name: UrlVerify
    required:
    - project
    - amount
    - currency
    - type
    type: object
    x-go-name: OrderCreateRequest
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  BillingServer_OrderItem:
    properties:
      amount:
        description: '@inject_tag: validate:"required,numeric,gt=0" json:"amount"
          bson:"amount"'
        format: double
        type: number
        x-go-name: Amount
      code:
        description: '@inject_tag: validate:"omitempty,min=5" json:"code" bson:"code"'
        type: string
        x-go-name: Code
      created_at:
        $ref: '#/definitions/Timestamp'
      currency:
        description: '@inject_tag: validate:"required,alpha,len=3" json:"currency"
          bson:"currency"'
        type: string
        x-go-name: Currency
      description:
        description: '@inject_tag: validate:"required" json:"description" bson:"description"'
        type: string
        x-go-name: Description
      id:
        description: '@inject_tag: validate:"required,hexadecimal,len=24" json:"id"
          bson:"_id"'
        type: string
        x-go-name: Id
      images:
        description: '@inject_tag: validate:"dive,omitempty,uri" json:"images" bson:"images"'
        items:
          type: string
        type: array
        x-go-name: Images
      metadata:
        additionalProperties:
          type: string
        description: '@inject_tag: json:"metadata" bson:"metadata"'
        type: object
        x-go-name: Metadata
      name:
        description: '@inject_tag: validate:"required" json:"name" bson:"name"'
        type: string
        x-go-name: Name
      object:
        description: '@inject_tag: validate:"required" json:"object" bson:"object"'
        type: string
        x-go-name: Object
      platform_id:
        description: '@inject_tag: validate:"omitempty,min=3" json:"platform_id" bson:"platform_id"'
        type: string
        x-go-name: PlatformId
      sku:
        description: '@inject_tag: validate:"required" json:"sku" bson:"sku"'
        type: string
        x-go-name: Sku
      updated_at:
        $ref: '#/definitions/Timestamp'
      url:
        description: '@inject_tag: validate:"omitempty,url" json:"url" bson:"url"'
        type: string
        x-go-name: Url
    type: object
    x-go-name: OrderItem
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  BillingServer_PaymentFormJsonData:
    properties:
      account:
        description: user account, may be null
        type: string
        x-go-name: Account
      amount:
        format: double
        type: number
        x-go-name: Amount
      country_change_allowed:
        description: TODO
        type: boolean
        x-go-name: CountryChangeAllowed
      country_payments_allowed:
        description: TODO
        type: boolean
        x-go-name: CountryPaymentsAllowed
      currency:
        type: string
        x-go-name: Currency
      description:
        description: TODO
        type: string
        x-go-name: Description
      email:
        description: TODO
        type: string
        x-go-name: Email
      has_vat:
        description: flag to show VAT commission amount in payment form
        type: boolean
        x-go-name: HasVat
      inline_form_redirect_url:
        type: string
        x-go-name: InlineFormRedirectUrl
      items:
        description: TODO
        items:
          $ref: '#/definitions/BillingServer_OrderItem'
        type: array
        x-go-name: Items
      token:
        type: string
        x-go-name: Token
      total_amount:
        format: double
        type: number
        x-go-name: TotalAmount
      user_address_data_required:
        description: flag to get information about user real geo position
        type: boolean
        x-go-name: UserAddressDataRequired
      user_ip_data:
        $ref: '#/definitions/BillingServer_UserIpData'
      vat:
        description: amount of VAT for payment
        format: double
        type: number
        x-go-name: Vat
    type: object
    x-go-name: PaymentFormJsonData
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/grpc
  BillingServer_TokenRequest:
    properties:
      settings:
        $ref: '#/definitions/TokenSettings'
      user:
        $ref: '#/definitions/TokenUser'
    type: object
    x-go-name: TokenRequest
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/grpc
  BillingServer_UserIpData:
    properties:
      city:
        description: description TODO
        type: string
        x-go-name: City
      country:
        description: description TODO
        type: string
        x-go-name: Country
      zip:
        description: description TODO
        type: string
        x-go-name: Zip
    required:
    - country
    - city
    - zip
    type: object
    x-go-name: UserIpData
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/grpc
  BillingSever_ResponseErrorMessage:
    properties:
      code:
        description: description TODO
        type: string
        x-go-name: Code
      details:
        description: '@inject_tag: json:"details,omitempty"'
        type: string
        x-go-name: Details
      message:
        description: '@inject_tag: json:"message"'
        type: string
        x-go-name: Message
    required:
    - code
    type: object
    x-go-name: ResponseErrorMessage
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/grpc
  CreateOrderJsonProjectResponse:
    properties:
      id:
        description: Unique identifier for the order.
        type: string
        x-go-name: Id
      payment_form_data:
        $ref: '#/definitions/BillingServer_PaymentFormJsonData'
      payment_form_url:
        description: The PaySuper-hosted URL of payment form.
        type: string
        x-go-name: PaymentFormUrl
    required:
    - id
    - payment_form_url
    type: object
    x-go-package: github.com/paysuper/paysuper-management-api/internal/handlers
  OrderBillingAddress:
    properties:
      city:
        type: string
        x-go-name: City
      country:
        description: '@inject_tag: validate:"omitempty,alpha,len=2"'
        type: string
        x-go-name: Country
      postal_code:
        description: '@inject_tag: bson:"postal_code"'
        type: string
        x-go-name: PostalCode
      state:
        type: string
        x-go-name: State
    type: object
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  Timestamp:
    description: |-
      # Examples

      Example 1: Compute Timestamp from POSIX `time()`.

      Timestamp timestamp;
      timestamp.set_seconds(time(NULL));
      timestamp.set_nanos(0);

      Example 2: Compute Timestamp from POSIX `gettimeofday()`.

      struct timeval tv;
      gettimeofday(&tv, NULL);

      Timestamp timestamp;
      timestamp.set_seconds(tv.tv_sec);
      timestamp.set_nanos(tv.tv_usec * 1000);

      Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

      FILETIME ft;
      GetSystemTimeAsFileTime(&ft);
      UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

      A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
      is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
      Timestamp timestamp;
      timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
      timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

      Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

      long millis = System.currentTimeMillis();

      Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
      .setNanos((int) ((millis % 1000) * 1000000)).build();


      Example 5: Compute Timestamp from current time in Python.

      timestamp = Timestamp()
      timestamp.GetCurrentTime()

      # JSON Mapping

      In JSON format, the Timestamp type is encoded as a string in the
      [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
      format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
      where {year} is always expressed using four digits while {month}, {day},
      {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
      seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
      are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
      is required. A proto3 JSON serializer should always use UTC (as indicated by
      "Z") when printing the Timestamp type and a proto3 JSON parser should be
      able to accept both UTC and other timezones (as indicated by an offset).

      For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
      01:30 UTC on January 15, 2017.

      In JavaScript, one can convert a Date object to this format using the
      standard [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString]
      method. In Python, a standard `datetime.datetime` object can be converted
      to this format using [`strftime`](https://docs.python.org/2/library/time.html#time.strftime)
      with the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one
      can use the Joda Time's [`ISODateTimeFormat.dateTime()`](
      http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime--
      ) to obtain a formatter capable of generating timestamps in this format.
    properties:
      nanos:
        description: |-
          Non-negative fractions of a second at nanosecond resolution. Negative
          second values with fractions must still have non-negative nanos values
          that count forward in time. Must be from 0 to 999,999,999
          inclusive.
        format: int32
        type: integer
        x-go-name: Nanos
      seconds:
        description: |-
          Represents seconds of UTC time since Unix epoch
          1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
          9999-12-31T23:59:59Z inclusive.
        format: int64
        type: integer
        x-go-name: Seconds
    title: |-
      A Timestamp represents a point in time independent of any time zone
      or calendar, represented as seconds and fractions of seconds at
      nanosecond resolution in UTC Epoch time. It is encoded using the
      Proleptic Gregorian Calendar which extends the Gregorian calendar
      backwards to year one. It is encoded assuming all minutes are 60
      seconds long, i.e. leap seconds are "smeared" so that no leap second
      table is needed for interpretation. Range is from
      0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
      By restricting to that range, we ensure that we can convert to
      and from  RFC 3339 date strings.
      See [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).
    type: object
    x-go-package: github.com/golang/protobuf/ptypes/timestamp
  TokenSettings:
    properties:
      amount:
        description: '@inject_tag: json:"amount" validate:"omitempty,numeric,gt=0"'
        format: double
        type: number
        x-go-name: Amount
      currency:
        description: '@inject_tag: json:"currency" validate:"omitempty,alpha,len=3"'
        type: string
        x-go-name: Currency
      description:
        description: '@inject_tag: json:"description"'
        type: string
        x-go-name: Description
      items:
        description: '@inject_tag: json:"items"'
        items:
          $ref: '#/definitions/TokenSettingsItem'
        type: array
        x-go-name: Items
      metadata:
        additionalProperties:
          type: string
        description: '@inject_tag: json:"metadata"'
        type: object
        x-go-name: Metadata
      payment_method:
        description: '@inject_tag: json:"payment_method"'
        type: string
        x-go-name: PaymentMethod
      platform_id:
        description: '@inject_tag: json:"platform_id"'
        type: string
        x-go-name: PlatformId
      products_ids:
        description: '@inject_tag: json:"products_ids"'
        items:
          type: string
        type: array
        x-go-name: ProductsIds
      project_id:
        description: '@inject_tag: json:"project_id" validate:"required,hexadecimal,len=24"'
        type: string
        x-go-name: ProjectId
      return_url:
        $ref: '#/definitions/TokenSettingsReturnUrl'
      type:
        description: '@inject_tag: json:"type"'
        type: string
        x-go-name: Type
    type: object
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  TokenSettingsItem:
    properties:
      amount:
        description: '@inject_tag: validate:"required,numeric,gt=0"'
        format: double
        type: number
        x-go-name: Amount
      currency:
        description: '@inject_tag: validate:"required,alpha,len=3"'
        type: string
        x-go-name: Currency
      sku:
        description: '@inject_tag: validate:"required"'
        type: string
        x-go-name: Sku
    type: object
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  TokenSettingsReturnUrl:
    properties:
      fail:
        description: '@inject_tag: validate:"omitempty,url"'
        type: string
        x-go-name: Fail
      success:
        description: '@inject_tag: validate:"omitempty,url"'
        type: string
        x-go-name: Success
    type: object
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  TokenUser:
    properties:
      address:
        $ref: '#/definitions/OrderBillingAddress'
      email:
        $ref: '#/definitions/TokenUserEmailValue'
      id:
        type: string
        x-go-name: Id
      ip:
        $ref: '#/definitions/TokenUserIpValue'
      locale:
        $ref: '#/definitions/TokenUserLocaleValue'
      metadata:
        additionalProperties:
          type: string
        type: object
        x-go-name: Metadata
      name:
        $ref: '#/definitions/TokenUserValue'
      phone:
        $ref: '#/definitions/TokenUserPhoneValue'
    type: object
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  TokenUserEmailValue:
    properties:
      value:
        description: '@inject_tag: validate:"omitempty,email"'
        type: string
        x-go-name: Value
      verified:
        type: boolean
        x-go-name: Verified
    type: object
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  TokenUserIpValue:
    properties:
      value:
        description: '@inject_tag: validate:"omitempty,ip"'
        type: string
        x-go-name: Value
    type: object
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  TokenUserLocaleValue:
    properties:
      value:
        description: '@inject_tag: validate:"omitempty,alpha,len=2"'
        type: string
        x-go-name: Value
    type: object
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  TokenUserPhoneValue:
    properties:
      value:
        description: '@inject_tag: validate:"omitempty,phone"'
        type: string
        x-go-name: Value
      verified:
        type: boolean
        x-go-name: Verified
    type: object
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
  TokenUserValue:
    properties:
      value:
        type: string
        x-go-name: Value
    type: object
    x-go-package: github.com/paysuper/paysuper-billing-server/pkg/proto/billing
host: p1payapi.tst.protocol.one
info:
  title: TITLE
  version: 1.0.0
paths:
  /api/v1/order:
    post:
      consumes:
      - application/json
      description: Create a payment order with parameters of user and products.
      operationId: orderPathCreateJson
      parameters:
      - name: data
        in: body
        required: true
        schema:
          $ref: '#/definitions/BillingServer_OrderCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Object which contain data to render payment form.
          schema:
            $ref: '#/definitions/CreateOrderJsonProjectResponse'
        "400":
          description: Object with an error message.
          schema:
            $ref: '#/definitions/BillingSever_ResponseErrorMessage'
        "500":
          description: Object with an error message.
          schema:
            $ref: '#/definitions/BillingSever_ResponseErrorMessage'
      summary: Create a payment order.
      tags:
      - Order
  /api/v1/tokens:
    post:
      consumes:
      - application/json
      description: Create a secure string that encrypts all order parameters including
        a customer. It identifies a game, user, and order parameters, thus you can
        determine your customers’ purchases on your side.
      operationId: tokenPathCreateTokenPath
      parameters:
      - name: data 
        in: body
        required: true
        schema:
          $ref: '#/definitions/BillingServer_TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: An object with a token.
          schema:
            properties:
              token:
                description: A secure string which contains encrypted information
                  about a user and order.
                type: string
            type: object
        "400":
          description: Object with an error message.
          schema:
            $ref: '#/definitions/BillingSever_ResponseErrorMessage'
        "500":
          description: Object with an error message.
          schema:
            $ref: '#/definitions/BillingSever_ResponseErrorMessage'
      summary: Create a token.
      tags:
      - Token
schemes:
- https
swagger: "2.0"