(function(){const pages=[{"idx":0,"href":"/docs/markdown/","title":"Example markdown","content":" Title with a line Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nHeadings h1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading Notes  The note with padding example.\n Code { \u0026#34;id\u0026#34;: \u0026#34;5ca5124868add448289e432e\u0026#34;, \u0026#34;project_id\u0026#34;: \u0026#34;5be2e16701d96d00012d26c3\u0026#34;, \u0026#34;description\u0026#34;: { \u0026#34;en\u0026#34;: \u0026#34;GTA 3 description\u0026#34; } } { \u0026quot;id\u0026quot;: \u0026quot;5ca5124868add448289e432e\u0026quot;, \u0026quot;project_id\u0026quot;: \u0026quot;5be2e16701d96d00012d26c3\u0026quot;, \u0026quot;description\u0026quot;: { \u0026quot;en\u0026quot;: \u0026quot;GTA 3 description\u0026quot; } }  Tables    Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    Columns Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   Hints Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Lists  Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo  Buttons Buttons are styled links that can lead to local page or external link ad contain CSS styles.\n{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Example  Get Home  Contribute  Expand Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample Default {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}  Expand ↕  Markdown content Lorem markdownum insigne\u0026hellip;    With Custom Label {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}  Custom Label ...  Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    Tabs Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example MacOS  MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n Linux  Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n Windows  Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n  KaTeX KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample {{\u0026lt; katex [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} x = \\begin{cases} a \u0026amp;\\text{if } b \\\\ c \u0026amp;\\text{if } d \\end{cases} {{\u0026lt; /katex \u0026gt;}}   \n$$ x = \\begin{cases} a \u0026\\text{if } b \\\\ c \u0026\\text{if } d \\end{cases} $$   Mermaid Chart Mermaid is library for generating svg charts and diagrams from text.\nExample {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} sequenceDiagram Alice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you? alt is sick Bob-\u0026gt;\u0026gt;Alice: Not so good :( else is well Bob-\u0026gt;\u0026gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-\u0026gt;\u0026gt;Alice: Thanks for asking end {{\u0026lt; /mermaid \u0026gt;}}   sequenceDiagram Alice-Bob: Hello Bob, how are you? alt is sick Bob-Alice: Not so good :( else is well Bob-Alice: Feeling fresh like a daisy end opt Extra response Bob-Alice: Thanks for asking end   Images   "},{"idx":1,"href":"/docs/glossary/","title":"Glossary","content":" Terms:  PaySuper Checkout PaySuper JS SDK PaySuper API PaySuper PaySuper Dashboard  Payment form:  a Checkout Form a payment an order a token  PaySuper Dashboard Product and Projects:  a Project a Product a Project\u0026rsquo;s Secret key a Virtual currency an in-game currency a Game key a key-activated product a Virtual item a transaction  PaySuper Dashboard pages:  the Projects list page the Project settings page the Project webhooks page the Transactions page the Company Onboarding page the Banking info section  "},{"idx":2,"href":"/docs/payments/fulfillment/","title":"After the payment","content":" After the payment When your customers successfully complete payments they are redirected to the success URL page that you passed in a request parameter. Typically, this is a page on your website that informs your customer that their payment was successful.\nTo fulfil the customer’s purchase you can make it in several ways:\nFulfilling purchases manually with the PaySuper Dashboard\nFulfilling purchases automatically with webhooks\nEmail receipts\nFulfilling purchases with the PaySuper Dashboard Every customers\u0026rsquo; payment is recorded as a new entry in the payments log shown on the Transactions page.\nAll your customers\u0026rsquo; transactions are organised by Products, Dates and other payment parameters.\n  The transaction details To manually fulfil the customer\u0026rsquo;s purchase you can click a specified record to dive into transaction card to see additional details.\nManually refund a purchase Also, you can manually request a refund a processed transaction from the Transactions page or a transaction card.\nFilter transactions and download If it\u0026rsquo;s necessary to use the transactions data in an external analytics tool just export the list of transactions per period in an appropriate format pdf, xls or csv.\n  Fulfilling purchases with webhooks After the payments, PaySuper can send you webhook events to your server. You can create a handler for the webhook events like a successful payment, refund payment and so on.\nUsing the handler you can obtain information from the webhook\u0026rsquo;s object parameter in the payload about the customer and payment. With this comprehensive data, you can execute your server-side code and fulfil the payment.\nConfigure Webhooks for your Project in PaySuper Dashboard and handle them on your server.  For instance, this is the base object representing the webhook event payment.success:\n{ \u0026#34;id\u0026#34;: \u0026#34;5d23426ab8b1eea163304202653796fa801081e739d506615ddac583019045f3\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;notification\u0026#34;, \u0026#34;event\u0026#34;: \u0026#34;payment.success\u0026#34;, \u0026#34;created_at\u0026#34;: \u0026#34;2019-11-16T05:41:05Z\u0026#34;, \u0026#34;object\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;726d9e07-1dc8-4159-8d52-f95941066bc8\u0026#34;, \u0026#34;transaction\u0026#34;: \u0026#34;2978077\u0026#34;, \u0026#34;object\u0026#34;: \u0026#34;order\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;created\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;A summary for the purchase\u0026#34;, \u0026#34;receipt_email\u0026#34;: \u0026#34;user.email@example.com\u0026#34;, \u0026#34;amount\u0026#34;: 595, \u0026#34;currency\u0026#34;: \u0026#34;RUB\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;5dcf8b24b5a6990001bac2b6\u0026#34;, \u0026#34;object\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;user.email@example.com\u0026#34;, \u0026#34;locale\u0026#34;: \u0026#34;ru-RU\u0026#34;, ... }, \u0026#34;tax\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;vat\u0026#34;, \u0026#34;rate\u0026#34;: 0.19, \u0026#34;amount\u0026#34;: 95, \u0026#34;currency\u0026#34;: \u0026#34;RUB\u0026#34; }, \u0026#34;method\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;Bank card\u0026#34;, \u0026#34;external_id\u0026#34;: \u0026#34;BANKCARD\u0026#34;, \u0026#34;payment_system_id\u0026#34;: \u0026#34;5be2d0b4b0b30d0007383ce5\u0026#34;, \u0026#34;card\u0026#34;: { \u0026#34;first6\u0026#34;: \u0026#34;400000\u0026#34;, \u0026#34;last4\u0026#34;: \u0026#34;0002\u0026#34;, \u0026#34;masked\u0026#34;: \u0026#34;400000...0002\u0026#34;, \u0026#34;expiry_month\u0026#34;: \u0026#34;11\u0026#34;, \u0026#34;expiry_year\u0026#34;: \u0026#34;2023\u0026#34;, \u0026#34;brand\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;fingerprint\u0026#34;: \u0026#34;$2a$04$9VRouYlBC.qMYQrLpmlXOeGbL2WFZDGGq/KdTeeHSfWkosgJgrWw2\u0026#34;, \u0026#34;secure3d\u0026#34;: true }, ... }, \u0026#34;type\u0026#34;: \u0026#34;simple\u0026#34;, \u0026#34;platform_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;receipt_id\u0026#34;: \u0026#34;efefc5d3-c2e2-4157-8789-4bfb7c1eec34\u0026#34;, ... } } Email receipts Payment or refund receipts\nPaySuper automatically sends email receipts to your customers whenever they make a successful payment or refunded purchase.\nIt\u0026rsquo;s required for user to fill in an email field on the Checkout form. Besides, you can pass a customer\u0026rsquo;s email address when making the API Tokens or API Order requests for payment initiation.\nKey-product receipts\nFor a key-activated product purchase, your customer gets an email with the receipt and an extra email with a purchased product key.\nIf your customer has purchased several game keys for different DRM platforms, he gets an email per DRM platform with a game key and instructions on how to activate the key on the target DRM store.\nNext steps Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Going live checklist\nYou can inspect this checklist before going live to ensure you\u0026rsquo;ve implemented all the significant setup steps.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":3,"href":"/docs/analytics-integration/","title":"Analytics Integration","content":" Analytics Integration It\u0026rsquo;s assumed that you have already integrated PaySuper Checkout via SDK and have set up your Google Analytics account.\nIntegrate We\u0026rsquo;ve set up a Google Analytics data collection in a test mode inside PaySuper. After the Beta testing, we\u0026rsquo;ll release the analytics integration to use with a customer\u0026rsquo;s tracking ID.  Google Analytics You can track the following events:\n   Category Action Description     userAction clickCloseCross Close the form by clicking on the cross (for the modal window mode).   general formClosed The Checkout Form is closed (for the modal window mode).   general hasSavedBankCards The Checkout Form contains user\u0026rsquo;s saved cards on start.   general noSavedBankCards The Checkout Form does not contain user\u0026rsquo;s saved cards on start.   userAction clickSaveUserCountry Clicking the Save button after selecting a country on the country selection screen for a payment.   userAction clickCloseButton Clicking the Close button at the bottom of the Checkout Form.   userAction clickOkButton Clicking the OK button at the bottom of the Checkout Form.   userAction clickPayButton Clicking the Pay button at the bottom of the Checkout Form.   general submitPaymentForm Starting the payment proccess after a successful card validation.   userAction setUserCountry The selected country has been changed (in any way).   userAction clickRememberCard Clicking the checkbox Remember.   userAction selectSavedCard A user has selected a saved card.   userAction removeSavedCard A user has started deleting a saved card.   userAction cancelRemovingSavedCard A user has cancelled deleting a saved card.   general submitSavedCardRemove A request to delete a saved card has been submitted (after the 5 second timeout).   userAction clickSupportLink Clicking the Support link.   userAction clickUserAgreementLink Clicking the User Agreement link.   userAction clickToggleCart Clicking the Collapse/Expand a cart toggle (for the mobile view mode).   userAction clickProjectLink Clicking the Project link.   userAction clickTermsOfUseLink Clicking the Terms of use link.   userAction clickPaySuperLink Clicking the PasySuper link.   userAction clickIconSupportLink Clicking the Support icon on the top of the Checkout Form next to the Languages selector.   userAction clickOpenReceiptButton Clicking the Open the receipt page button.   userAction selectPlatform A user has selected the game platform.   userAction useSavedBankCards A user has switched to the saved cards.   userAction useManualBankCardsInput A user has switched to the manual input of a bank card data.   general showActionProcessing The loading screen is being shown.   general showActionResult A screen with a successful or failed result is being shown.   general orderPrimaryInitError An error on the Checkout Form initialisation (i.e. a failure to create the order).   general orderAlreadyProcessed The Checkout Form has failed to load because the order had already been processed.   userAction setPaymentMethod A payment method has been selected (a bank card, QIWI etc.).   general purchaseFailed The payment process has failed.   general checkPaymentAccount Started verifying the bank card number.   general customLocale The Checkout Form has started with a defined locale (set via a token).   userAction setLocale A user has changed a locale.   ecommerce begin_checkout Submitting e-commerce data after the Checkout Form start.   ecommerce purchase Submitting e-commerce data after a successul purchase.    Next steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transactions to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Going live checklist\nYou can inspect this checklist before going live to ensure you\u0026rsquo;ve implemented all the significant setup steps.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":4,"href":"/docs/payments/","title":"Checkout Overview","content":" PaySuper Checkout PaySuper Checkout creates a secure PaySuper-hosted form that lets you collect payments with just a few lines of code. The Checkout Form loads near instantly and is designed to boost your paying conversion rate.\n  PaySuper Checkout features  Payment methods: VISA, Master Card, AMEX, JCB, China UnionPay, Bitcoin payments, Alipay, QIWI, Bank Wire Transfers. Payment types: Simple Checkout, Items Checkout. Authentication: Dynamic 3D Secure (ready for Strong Customer Authentication). Localization: Localized for 24 languages. Email receipts: Automatic email receipts right to your customers\u0026rsquo; inbox. Automated calculations: Automatically calculates the taxes and VAT due on your orders. Conversion-optimized: The payment form loads instantly with a single-page layout.  Try now See how the Checkout Form looks and feels\nChoose a card payment method and enter one of the test cards to checkout in a test mode:\n3D Secure: 4000 0000 0000 0002\nNon 3D Secure: 4000 0000 0000 0077\nEnter arbitrary expiry date (the format is MM/YY), a Secure code (CVC/CVV, the format is 3 digits) and a cardholder name (the format is first name last name).\nTest Payment \n HOW IT WORKS\nTry out the payment sample or see the code on GitHub.\n  Getting Started To get started with PaySuper, choose your business model:\nSimple Checkout Simple Checkout is designed for payment orders with dynamical pricing, for example, stores that use its e-commerce engine for product management. Likewise, this option works well with non-product payments such as donations. In this mode, you specify the currency and the price, while the payment amount due for the end-user is calculated accordingly to the exchange rate if it differs from the specified order currency.\nProducts Checkout PaySuper Checkout provides several types of products which you specify in an order as a parameter type:\nGame Keys\nThis sales option is best suited to sale game keys for DRM platforms such as Steam, GOG, Uplay, Origin, PSN, XBOX Store, Nintendo Store, Itch.io, Epic Games Store. This feature allows you to sell any key-activated products (such as DLCs and expansion packs) that the target DRM platforms support.\nVirtual Items\nThis sales option enables you to sell your Virtual Items, like swords, guns, helmets and virtual currency packs.\nVirtual Currency\nVirtual Currency is an option to sell your in-game currency — gold, coins, etc. It allows you to sell customisable quantity of your currency.\nNext steps Continue with the Quick Start guide  Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":5,"href":"/docs/payments/sdk-integration/","title":"Client-side payment initialization","content":" Payment initialization on the client-side The client-side payment initialization makes it possible to integrate a Checkout Form into your website using only frontend code.\nIt’s easy to embed PaySuper JS SDK with just a few lines of Javascript code to start a payment process and display a purchase status finally without any server-side code.\n HOW IT WORKS\nTry out the payment sample or see the code on GitHub.\n  Notice that a pure client-side payment initialization is possible yet a special care must be taken. Your project identity could be used from any web-site to initiate payments without any additional checks or verifications from the PaySuper side. At the moment we\u0026rsquo;re working on an option to disable that kind of payment orders in the Project settings.  If your sales use cases are not filled, use the server-side payment initialization with PaySuper API instead.\nStep 1. Embed the Checkout Form To get started, include the following script tag on your website - always load it directly from https://cdn.pay.super.com:\n\u0026lt;script src=\u0026#34;https://cdn.pay.super.com/paysdk/latest/paysuper.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Step 2. Provide parameters Simple Checkout To create a Checkout Form for one-time payments it\u0026rsquo;s enough to have a Project ID and an acceptable price and currency.\nUse this sample code to create a PaySuper object with the required parameters for a simple checkout:\nconst paySuper = new PaySuper({ project: \u0026#39;5cd5624a06ae110001509186\u0026#39;, amount: 10, currency: \u0026#39;USD\u0026#39; });  Products Checkout If you\u0026rsquo;re selling such products such as key-activated products, virtual items or in-game currency, you can use this sample code with a defined product parameter:\nGame Key  const paySuper = new PaySuper({ project: \u0026#39;5dcd11bc218dc30001d7098f\u0026#39;, products: [\u0026#39;5dcdb885218dc30001d73c27\u0026#39;], type: \u0026#39;key\u0026#39; });   Virtual Item  const paySuper = new PaySuper({ project: \u0026#39;5dcd11bc218dc30001d7098f\u0026#39;, products: [\u0026#39;5dcdb73d218dc30001d73c25\u0026#39;, \u0026#39;5dcdb841218dc30001d73c26\u0026#39;], type: \u0026#39;product\u0026#39; });   Virtual Currency  const paySuper = new PaySuper({ project: \u0026#39;5dcd11bc218dc30001d7098f\u0026#39;, products: [\u0026#39;5e292ba2769774c7377b739e\u0026#39;], type: \u0026#39;product\u0026#39; });    Full list of PaySuper parameters\nRemember to use your IDs for the project and products. You can find your IDs in your merchant account on the PaySuper Projects. Open your Project settings page, select the Product tab and click on the Product name. Copy the Project and Product IDs from the page URL.  Step 3. Display the Checkout Form This example offers a sample code that displays a PaySuper Checkout Form with a BUY button.\nEmbed as a modal window  \u0026lt;script\u0026gt; function buyItems() { const paySuper = new PaySuper({ project: \u0026#39;5cd5624a06ae110001509186\u0026#39;, amount: 10, currency: \u0026#39;USD\u0026#39; }); paySuper.renderModal(); } \u0026lt;/script\u0026gt; \u0026lt;button onclick=\u0026#34;buyItems()\u0026#34;\u0026gt;BUY\u0026lt;/button\u0026gt;  Embed as an iframe  \u0026lt;script\u0026gt; function buyItems() { const paySuper = new PaySuper({ project: \u0026#39;5cd5624a06ae110001509186\u0026#39;, amount: 10, currency: \u0026#39;USD\u0026#39; }); paySuper.renderPage(); } \u0026lt;/script\u0026gt; \u0026lt;button onclick=\u0026#34;buyItems()\u0026#34;\u0026gt;BUY\u0026lt;/button\u0026gt;   Step 4. Handle the purchase events paySuper.on(\u0026#39;paymentCompleted\u0026#39;, function() { // You can show a message that the payment is completed })  Full events list in the expected order of execution\nNext steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transactions to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Customizing the Checkout\nLearn about the different ways you can customize your Checkout.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":6,"href":"/docs/payments/customization/","title":"Customizing Checkout","content":" Customizing Checkout Learn about the different ways you can customize your Checkout.\n Localization Prefilling customer data Displaying VAT in a payment form Saving payment methods for future Customizing theme Customizing the colors Analytics Integration  Localization Dashboard\nThe Checkout Form is localized for 24 languages.\nYou can choose the complete set of supported languages for the project and products descriptions on the Project Settings page in your PaySuper Dashboard.\nPrefilling customer data Token\nBoost your payment conversion rate with a payment form pre-filled with your customer\u0026rsquo;s name and email. To have the payment form prefilled, you can generate a token to encrypt all required information about your customer\u0026rsquo;s intent to pay.\nDisplaying VAT in a payment form Dashboard\nGet to know about VAT for e-services of foreign companies.\nYou can configure your Project Settings to display the total price and VAT in a payment form and receipt.\nTo show the total price with VAT already included, choose \u0026ldquo;VAT included in price\u0026rdquo; on the Project Settings page in your PaySuper Dashboard. By default, PaySuper displays a calculated VAT and product price separately in a payment form.\n  As the example below shows, if the in-game purchase is $10 and you apply \u0026ldquo;VAT included in price\u0026rdquo; then the total price will be equal to the same $10 in a payment form. By default, your customers see the total price with added taxes, for example, if the in-game purchase is $10 with VAT 20% then the total price is $12.\n  Saving payment methods for future PaySuper can securely store your customer\u0026rsquo;s billing address and the payment method data to prefill the Checkout Form with. The customer has to agree for this to happen.\nCustomizing theme PaySuper JS SDK\nconst paySuper = new PaySuper({ viewScheme: \u0026#39;light\u0026#39; });  Available options: dark (default), light.\n  Customizing the colors PaySuper JS SDK\nconst paySuper = new PaySuper({ viewSchemeConfig: { // headerTextColor overrides the default value of the viewSchemeConfig object  headerTextColor: \u0026#39;#333333\u0026#39; } });  Available parameters of viewSchemeConfig\n  Analytics Integration PaySuper JS SDK\nNowadays we set up a Google Analytics data collection in a test mode inside PaySuper. After the Beta testing, we\u0026rsquo;ll release the analytics integration to use with a customer\u0026rsquo;s tracking ID.\nNext steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transactions to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Going live checklist\nYou can inspect this checklist before going live to ensure you\u0026rsquo;ve implemented all the significant setup steps.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":7,"href":"/docs/","title":"Docs","content":""},{"idx":8,"href":"/docs/payments/live/","title":"Going Live","content":" PaySuper Checkout integration checklist When you’re done with PaySuper Checkout integration and are thinking about going live, we suggest you refer to the points below to check that you\u0026rsquo;ve covered all the significant steps.\nComplete the Company onboarding Dashboard\nWhen you are ready to start selling you will need to fill in all your company details in Company Onboarding and sign the documents in the License Agreement.\n Before confirming your application we manually check each new account to ensure that our platform is attended only by companies who are related to the gaming industry. This allows us to focus on the relevant features and quality for our users.\n Fill in the info about your Project Dashboard\nChoose the complete set of supported languages for the project and products descriptions on the Project Settings page in your PaySuper Dashboard. Fill in localised project and products descriptions. These will be listed on the payment form and customer receipt emails.\nPrefill the customer data Token\nYou can use a token to prefill the Checkout Form with all required information about your customer on the payment initialization.\nFill in the redirect URLs Dashboard\nCheck your redirect URLs for a successful or failed payment are added in the Project Setting for the Payment Form.\n  Customize the Checkout Form PaySuper JS SDK\nYou can add your branding colors to the Checkout Form view scheme.\nFulfill the purchases Webhooks\nYou can manually fulfil a purchase. Instead, create a handler for the webhook events and execute your server-side code to fulfil the payment.\nNext steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transactions to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":9,"href":"/docs/payments/token/","title":"Payment initialization with token","content":" Payment initialization with token A token is an encrypted string that represents certain details of your customer (such as the user ID, email and others), a game and purchase parameters.\nYou can create a token before your customer intents to pay and use it in the future payments. For instance, you can create the token after a user has signed up or has logged in to your website or a game client. When your customer wants to pay for something you redirect them to the PaySuper-hosted Checkout Form to instantly complete a purchase.\nToken-based features  Instantly redirect to a Checkout Form: Once you have created a token that stores the necessary customer data, you don\u0026rsquo;t need to request that data again from the customer. Instead you can display the PaySuper Checkout Form so the customer can conveniently confirm the purchase. This is useful when you can identify a customer in your system.\n The pre-filled information in a Checkout Form: The Checkout Form is pre-filled with the applicable information about your customer that it can get from the token.\n  You can follow these steps to create a Checkout Form:\nStep 1. Create a token on your server Send the POST /api/v1/tokens to receive an encrypted string. Learn more about the full list of parameters.\nRemember to add a Header X-API-SIGNATURE with the Project\u0026rsquo;s Secret key found on the Project webhooks page.\nYour Secret keys carry many privileges, so be sure to keep them secure! Do not share your Secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth.\n Runkit  Run the script and view the response data:\n    cURL  Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;X-API-SIGNATURE: YOUR_SECRET_KEY\u0026#39; -d \u0026#39;{ \u0026#34;settings\u0026#34;: { \u0026#34;project_id\u0026#34;: \u0026#34;YOUR_PROJECT_ID\u0026#34;, \u0026#34;amount\u0026#34;: 10, \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;simple\u0026#34; }, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;58799f2c2564296bd2cb\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;city\u0026#34;: \u0026#34;Almere\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;NL\u0026#34;, \u0026#34;postal_code\u0026#34;: \u0026#34;1326 PA\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Flevoland\u0026#34; }, \u0026#34;email\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;user.email@example.com\u0026#34;, \u0026#34;verified\u0026#34;: true } } }\u0026#39; \u0026#39;https://api.pay.super.com/api/v1/tokens\u0026#39;   Step 2. Create a Checkout Form with a token Open a Checkout Form by URL New browser window  Retrieve the response parameter payment_form_url from the previous step. It is the URL of PaySuper-hosted payment form.\nWhen your customer is ready to start a payment you can redirect the user to the URL in a new browser window.\n Iframe  Retrieve the response parameter payment_form_url from the previous step. It is the URL of a PaySuper-hosted payment form.\nEmbed the Checkout Form as an inline iframe by URL:\n\u0026lt;iframe src=\u0026#34;{payment_form_url}\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;  Standalone web-page  Retrieve the response parameter with id from the previous step. It is the ID of the created order.\nUse this code sample to open the Checkout Form as a standalone web-page with PaySuper JS SDK and replace YOUR_ORDER_ID in the formUrl with id value:\n\u0026lt;script\u0026gt; function buyItems() { const paySuper = new PaySuper({ formUrl: \u0026#39;https://order.pay.super.com/?order_id=YOUR_ORDER_ID\u0026#39; }); paySuper.renderPage(); } \u0026lt;/script\u0026gt; \u0026lt;button onclick=\u0026#34;buyItems()\u0026#34;\u0026gt;BUY\u0026lt;/button\u0026gt;   Note that the parameters used in the POST /api/v1/tokens request override the corresponding parameters in an order object.  Client-side payment initialization To integrate a Checkout Form you can follow the client-side payment initialization but instead pass a token parameter when creating a PaySuper object.\nIf your token contains user and order parameters then you can create a Checkout Form instance with just a single parameter:\nconst paySuper = new PaySuper({ token: \u0026#39;5cd5620f06ae110001509185\u0026#39; });  Server-side payment initialization To integrate a Checkout Form you can follow the server-side payment initialization with the token parameter.\nIf your token contains the user and order parameters then you can request a Checkout Form URL with just a single parameter:\nRunkit  Run the script and view the response data:\n    cURL  Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{ \u0026#34;token\u0026#34;: \u0026#34;YOUR_TOKEN\u0026#34; }\u0026#39; \u0026#39;https://checkout.pay.super.com/api/v1/order\u0026#39;   Next steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transactions to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Customizing the Checkout\nLearn about the different ways you can customize your Checkout.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":10,"href":"/","title":"PaySuper Documentation","content":" Documentation Getting started PaySuper is a payment service with an open source multifunctional toolkit that provides secure and immediate online payment transactions for the games industry.\n  Expand the market with online payments PaySuper enables you to accept payments easily and securely in 170+ countries. We support major payment systems such as Visa, MasterCard, JCB, China Union Pay, Alipay along with direct banking in Germany, Austria and Switzerland.\nFollow our development quick start to integrate online payments on your website or a game client.\nQuestions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":11,"href":"/docs/payments/quick-start/","title":"Quick start","content":" Payments Flow User Flow   Integration Flow   Quick start Step 1. Register a PaySuper Company account  Registration and onboarding     Sign up. Verify your email address with the delivered confirmation email. Follow the steps of a brief Welcome Onboarding. You are required to fill in the Banking info in the Company Onboarding to be able create a project. Note that the currency of the bank account must be the same as the Account Currency for payouts filled in the Banking info.  When you are ready to start selling you will need to fill in all your company details in Company Onboarding and sign the documents in the License Agreement.\nBefore confirming your application we manually check each new account to ensure that our platform is attended only by companies who are related to the gaming industry. This allows us to focus on the relevant features and quality for our users.\n    Step 2. Set up a Project A single project is enough to start selling.\n Create a project    To create a Project:\n Open the Projects list page Click the Create Project button. Enter a Project Name. Click Create to redirect to the Project Settings page. Fill in the unique name and localised project descriptions. It will be mentioned in a payment form and different customer correspondence. Click Save.     Now you can initiate a simple checkout payment. It\u0026rsquo;s enough to create a payment order with your Project ID and an acceptable amount and currency.\nStep 3. Additional sales options If you want to sell products (as Game keys, Virtual items, Virtual currency) then easily add the necessary sales information about your products to the project.\n Add a Game key to the project    To add a Game key:\n Open your Project from the Projects list page Select the Sales options in the left sidebar and open the Game keys tab. Create a package to sell your game keys for associated DRM platforms. You can choose several platforms at once. Upload a pack of game keys for each DRM platform you selected. Enable the package and click Save.      Add a Virtual item to the project    To add a Virtual item:\n Open your Project from the Projects list page Select the Sales options in the left sidebar and open the Virtual items tab. Add a new item with localised text descriptions, SKU, prices and currencies. Enable and click Save.      Add a Virtual currency to the project    To add a Virtual currency:\n Open your Project from the Projects list page Select the Sales options in the left sidebar and open the Virtual currency tab. Fill in the unique name and setup the price for one virtual currency unit in all your project currencies. Enable and click Save. Now you can create in-game items using the virtual currency for a price.     Step 4. Set up a Checkout Form Use Checkout to collect one-time payments or to sell products defined in the Project.\nPayment initialization with token You can encrypt details of your customer (such as the user ID, email and others), a game and purchase parameters. When your customer wants to pay for something you redirect them to the PaySuper-hosted Checkout Form to instantly complete a purchase.\nServer-side payment initialization You can also integrate on a server-side without PaySuper SJ SDK for other reasons. Checkout Form can be embedded as an iframe or new window.\nClient-side payment initialization The client-side payment initialization lets you accept online payments using only frontend code PaySuper JS SDK. The Checkout Form can be embedded as an iframe or modal window.\nStep 4. After the payment You can use webhooks or the Transaction log to accomplish the purchase. More details about handling the purchase fulfilment with PaySuper Checkout are available at After the payment.\nNext steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transactions to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Customizing the Checkout\nLearn about the different ways you can customize your Checkout.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":12,"href":"/docs/payouts/","title":"Receiving Payouts","content":" Receiving Payouts Your customers\u0026rsquo; successful payments are stored on your PaySuper account balance and can be received to your bank account using Payouts.\nSetting up your bank account to receive payouts When you are ready to start selling you will need to fill in all your company details in Company Onboarding.\nBank account details for payouts are required when filling in Company Onboarding.\nNote that the currency of the bank account must be the same as the Account Currency for payouts filled in the Banking info.    Accounts can receive payouts in the following settlement currencies: USD, EUR, RUB, GBP.  Confirming a Royalty report PaySuper automatically generates a Royalty report based on the successfully received payments during the last 7 days. This report contains detailed information like fees, VAT, license share and so on. The PaySuper Royalty reports have a credible legal basis for receiving an invoice for a payout and making a payment to your bank account.\n  Once in 7 days, you will be notified in the Dashboard and by email about a new Royalty report. If you confirm this report for 5 days you can proceed with the payout process on the Payouts page. In another case, in 5 days your Royalty report will be automatically confirmed. But if you reject the Royalty report then PaySuper will process the disputed report within 5 days and resend for your confirmation.\nSchedule the payouts By default, every quarter, you will get an automatically formed payout invoice based on one or more royalty reports to close a quarter taxation period.\nFaster payouts means faster growth. If it\u0026rsquo;s crucial for your business to recoup the funds you’ve invested as quickly as possible you can turn off automatic payouts and manually send funds to your bank account. Moreover, you can set your schedule on the Payout settings page. It\u0026rsquo;s always possible to reset to default Payout schedule.\nMinimum payout amount To create a payout your PaySuper account balance must be more than a minimum payout amount.\n   Currency Minimum payout     USD 100.00 USD   EUR 100.00 EUR   RUB 10000.00 RUB   GBP 100.00 GBP    Payout costs Please notice there is a fixed service price $25.00 for every payout transaction for all payment methods.\nPayout failures There are some reasons when a payout is rejected by your bank. Thus your funds remain in the PaySuper account. PaySuper provides you an error message about the failure reason in the Dashboard and by email.\nFailure codes with a description:\nAccount Closed — The merchant bank account is closed.\nAccount Frozen — The merchant bank account is frozen.\nAccount Restricted — The merchant account has restrictions receiving payments. For instance, account has the limit of payments per time unit or has another type.\nDestination bank invalid — The destination bank has incorrect info.\nCould not process — The bank couldn\u0026rsquo;t make the transfer, but no further information is available.\nDeclined — The bank has refused to carry out the transfer. In that case, the merchant needs to contact the bank for details.\nInsufficient funds — Not enough funds on the merchant account to transfer.\nInvalid account number — The recipient\u0026rsquo;s account number or transit number is incorrect. This error is the same if the account number is absent from the bank.\nIncorrect account holder name — The recipient\u0026rsquo;s name is incorrect.\nInvalid currency — The destination bank cannot process an incoming payment in the specified currency or the currency of the account differs from the currency of payment.\nNext steps Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Going live checklist\nYou can inspect this checklist before going live to ensure you\u0026rsquo;ve implemented all the significant setup steps.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":13,"href":"/docs/refunds/","title":"Refunding payments","content":" Refunding payments You can request to refund a charge in whole for a processed transaction. After requesting a refund it cannot be cancelled. PaySuper automatically sends email receipt to your customers whenever they have a refunded purchase.\nThe refund can be sent only to the same customer\u0026rsquo;s bank card was used in a payment. If the customer\u0026rsquo;s card is expired, the refund will be made to the reissued card.  The refund costs Notice that all refund fees are being paid by PaySuper, so they are free of charge for you, but the fees from the original charge are not returned.\nIssuing a refund To refund a payment:\n Search the payment in the Transactions page. Click the Request to refund icon to the right of the Amount column. Choose a reason for the refund and confirm return.  Likewise, you can do the same steps to refund a payment via the transaction detailes page opened from the Transactions page.\n  Next steps Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Going live checklist\nYou can inspect this checklist before going live to ensure you\u0026rsquo;ve implemented all the significant setup steps.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":14,"href":"/docs/payments/integration/","title":"Server-side payment initialization","content":" Payment initialization on the server-side The server-side payment initialization makes it possible to integrate a Checkout Form into your website or game client using PaySuper API. It’s easy to get a Checkout Form URL using an Order API request and render a payment form in a browser.\nYou can use PaySuper JS SDK for the client-side payment initialization to integrate a Checkout Form into your website only on the client-side.\nStep 1. Create a Checkout order on your server Send the POST /api/v1/order to receive an Order ID. Learn more about the full list of parameters that can be used for instance the redirect URLs for successful and failed payments.\nSimple Checkout To initiate simple checkout payments it\u0026rsquo;s enough to create a payment order with your Project ID and an acceptable amount and currency.\nUse this sample code to create an Order ID with the required parameters for a simple checkout:\nRunkit  Run the script and view the response data:\n    cURL  Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{ \u0026#34;project\u0026#34;: \u0026#34;YOUR_PROJECT_ID\u0026#34;, \u0026#34;amount\u0026#34;: 10, \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;simple\u0026#34; }\u0026#39; \u0026#39;https://checkout.pay.super.com/api/v1/order\u0026#39;   Remember to use your IDs for the project and products. You can find your IDs in your merchant account on the PaySuper Projects. Open your Project settings page, select the Product tab and click on the Product name. Copy the Project and Product IDs from the page URL.  Products Checkout If you\u0026rsquo;re selling products such as key-activated products, virtual items or in-game currency, you can use this sample code with a defined product parameter:\nGame Key  Run the script and view the response data:\n   Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{ \u0026#34;project\u0026#34;: \u0026#34;YOUR_PROJECT_ID\u0026#34;, \u0026#34;products\u0026#34;: [\u0026#34;YOUR_GAME_KEY_ID\u0026#34;], \u0026#34;type\u0026#34;: \u0026#34;key\u0026#34; }\u0026#39; \u0026#39;https://checkout.pay.super.com/api/v1/order\u0026#39;  Virtual Item  Run the script and view the response data:\n   Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{ \u0026#34;project\u0026#34;: \u0026#34;YOUR_PROJECT_ID\u0026#34;, \u0026#34;products\u0026#34;: [\u0026#34;YOUR_VIRTUAL_ITEM_ID_1\u0026#34;, \u0026#34;YOUR_VIRTUAL_ITEM_ID_2\u0026#34;], \u0026#34;type\u0026#34;: \u0026#34;product\u0026#34; }\u0026#39; \u0026#39;https://checkout.pay.super.com/api/v1/order\u0026#39;  Virtual Currency (product)  Run the script and view the response data:\n   Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{ \u0026#34;project\u0026#34;: \u0026#34;YOUR_PROJECT_ID\u0026#34;, \u0026#34;products\u0026#34;: [\u0026#34;YOUR_VIRTUAL_ITEM_ID_1\u0026#34;], \u0026#34;type\u0026#34;: \u0026#34;product\u0026#34; }\u0026#39; \u0026#39;https://checkout.pay.super.com/api/v1/order\u0026#39;   Step 2. Display a Checkout Form New browser window  Retrieve the response parameter payment_form_url from the previous step. It is the URL of a PaySuper-hosted payment form.\nWhen your customer is ready to start a payment you can redirect the user to the URL in a new browser window.\n Iframe  Retrieve the response parameter payment_form_url from the previous step. It is the URL of a PaySuper-hosted payment form.\nEmbed the Checkout Form as an inline iframe by URL:\n\u0026lt;iframe src=\u0026#34;{payment_form_url}\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;  Standalone web-page  Retrieve the response parameter with id from the previous step. It is the ID of the created order.\nUse this code sample to open the Checkout Form as a standalone web-page with PaySuper JS SDK and replace YOUR_ORDER_ID in the formUrl with id value:\n\u0026lt;script\u0026gt; function buyItems() { const paySuper = new PaySuper({ formUrl: \u0026#39;https://order.pay.super.com/?order_id=YOUR_ORDER_ID\u0026#39; }); paySuper.renderPage(); } \u0026lt;/script\u0026gt; \u0026lt;button onclick=\u0026#34;buyItems()\u0026#34;\u0026gt;BUY\u0026lt;/button\u0026gt;   Next steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transactions to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Customizing the Checkout\nLearn about the different ways you can customize your Checkout.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":15,"href":"/docs/payments/localization/","title":"Supported languages","content":" Supported languages for PaySuper Checkout    Language ISO 639 Code     Arabic ar   Brazilian portuguese pt   Bulgarian bg   Chinese simplified zh   Chinese traditional zh   Czech cs   Danish da   English en   Finnish fi   French fr   German de   Greek el   Hebrew he   Italian it   Japanese ja   Korean ko   Polish pl   Portuguese pt   Russian ru   Spanish es   Swedish sv   Tai th   Turkish tr   Vietnamese vi    Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":16,"href":"/docs/payments/testing/","title":"Testing Checkout","content":" Testing the Payment Process The Payment Form integration should be tested in the Sandbox before going live.\nThe Sandbox provides full functionality but it only emulates processing, no actual bank transactions are made.\nWhen using PaySuper JS SDK ensure that:\n Handlers for the events are displayed properly. The PaySuper object is created with all required parameters or a token.  If you\u0026rsquo;re using the PaySuper API in your server-side code then ensure that:\n All API errors are handled accurately. Webhooks contains properly URL configured in the Functional URL section on the Project webhooks page.  Test card numbers To test a bank card payment in the Sandbox enter arbitrary expiry date (the format is MM/YY), a Secure code (CVC/CVV, the format is 3 digits) and a cardholder name (the format is first name last name).\nYou can also specify incorrect details (card number, expiration date, or CVV) to generate an error.  You will be redirected to the Sandbox page to select the desired results for success or failure. After you click the result button the current page will be closed and you will be redirected to the Checkout Form to view the purchase status.\n Note, that when Merchant chooses to fail the authentication, then the payment is always declined, no matter what PAN has been used.\n Use any of the following test card numbers:\n Note that the Authorized cards must only be used to test the antifraud system reaction with a compulsory transfer payment to preauthorization.\n 3-D Secure test cards 3-D Secure is emulated with a page that doesn’t require any passwords and shows two buttons instead. One button is for a successful authentication, another is for a failed authentication.\nConfirmed\n 4000 0000 0000 0002\nClick to copy     var clipboard = new ClipboardJS('.btn'); clipboard.on('success', function(e) { e.clearSelection(); clipboard.destroy(); }); clipboard.on('error', function(e) { clipboard.destroy(); });   Declined\n 5555 5555 5555 4444\nClick to copy     var clipboard = new ClipboardJS('.btn'); clipboard.on('success', function(e) { e.clearSelection(); clipboard.destroy(); }); clipboard.on('error', function(e) { clipboard.destroy(); });   Authorized\n 4000 0000 0000 0044\nClick to copy     var clipboard = new ClipboardJS('.btn'); clipboard.on('success', function(e) { e.clearSelection(); clipboard.destroy(); }); clipboard.on('error', function(e) { clipboard.destroy(); });    Non 3-D Secure test cards Confirmed\n 4000 0000 0000 0077\nClick to copy     var clipboard = new ClipboardJS('.btn'); clipboard.on('success', function(e) { e.clearSelection(); clipboard.destroy(); }); clipboard.on('error', function(e) { clipboard.destroy(); });   Declined\n 5555 5555 5555 4477\nClick to copy     var clipboard = new ClipboardJS('.btn'); clipboard.on('success', function(e) { e.clearSelection(); clipboard.destroy(); }); clipboard.on('error', function(e) { clipboard.destroy(); });   Authorized\n 4000 0000 0000 0051\nClick to copy     var clipboard = new ClipboardJS('.btn'); clipboard.on('success', function(e) { e.clearSelection(); clipboard.destroy(); }); clipboard.on('error', function(e) { clipboard.destroy(); });    Currencies You can choose a fixed set of currencies which will be actual for all products in your project on the Project settings page.\nThe full list of currencies that are supported for testing:\n   Code Country and Currency     USD United States Dollar   EUR Euro Member Countries   GBP United Kingdom Pound   RUB Russia Ruble   BRL Brazil Real   JPY Japan Yen   IDR Indonesia Rupiah   MYR Malaysia Ringgit   PHP Philippines Peso   SGD Singapore Dollar   THB Thailand Baht   VND Viet Nam Dong   KRW Korea (South) Won   TRY Turkey Lira   MXN Mexico Peso   CAD Canada Dollar   AUD Australia Dollar   NZD New Zealand Dollar   NOK Norway Krone   PLN Poland Zloty   CHF Switzerland Franc   CNY China Yuan Renminbi   INR India Rupee        Code Country and Currency     CLP Chile Peso   PEN Peru Sol   COP Colombia Peso   ZAR South Africa Rand   HKD Hong Kong Dollar   TWD Taiwan New Dollar   SAR Saudi Arabia Riyal   AED UAE Dirham   ARS Argentine Peso   ILS New Israeli Sheqel   KZT Kazakhstan Tenge   QAR Qatar Riyal   CRC Costa Rica Colon   HRK Croatia Kuna   CZK Czech Republic Koruna   RSD Serbia Dinar   RON Romania Leu   EGP Egypt Pound   DKK Denmark Krone   HUF Hungary Forint   BHD Bahraini Dinar   SEK Sweden Krona      Webhooks PaySuper can send you webhook events to your server to notify on the payment status. You can make a successful payment with a test card number and verify the resulting event data and to ensure that your webhook\u0026rsquo;s endpoint is working and is configured properly.  GETTING STARTED\nConfigure Webhooks for your Project in PaySuper Dashboard and handle them on your server.\n  Next steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transactions to accomplish the purchase.\n Customizing the Checkout\nLearn about the different ways you can customize your Checkout.\n Going live checklist\nYou can inspect this checklist before going live to ensure you\u0026rsquo;ve implemented all the significant setup steps.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":17,"href":"/docs/declines/","title":"Understanding Declines and Failed Payments","content":" Understanding Declines and Failed Payments During a payment process, a failure result can happen because of the typical reasons. For example, the customer may not have enough money on a bank card, or PaySuper Checkout may suspect a fraud attempt. If so, the payment status will be cancelled and a PaySuper Checkout notification event will contain an explanatory description.\nBut some reasons for the failed payments are unclear and uninformative. Moreover, for many alternative payment methods (APM) it’s hard to investigate the payment decline reasons. In PaySuper we continuously work to reduce the decline rates both for cards and APM. For instance, one of the most interesting issues is the decline by Card Issuer bank. In this case, we are working with each bank with a high decline rate to find workaround to solve the problem. As well as using local gateways to process a card payment only with high potency local gateways and banks.\nWe highlight the common possible reasons for the failed payments:\n Payment declined by card issuers or APM Payment blocked due to suspected fraud  In most cases, each type of failure is variously handled. To help you better understand what happened, the reason for a payment’s failure is provided within the payment’s details opened from the Transactions page.\nPayment declined by card issuers or APM Usually, the issuer of your customer’s card have automated systems or risk models which determine whether or not to authorize it when a charge is submitted. Black and white lists, your customer’s spending habits, account balance and a card information like the expiration date, cardholder and CVC are taken into account. You can find the decline reason for your customer’s card issuer in the transaction details from the Transactions page or in the webhook event payment.canceled.\nUnfortunately, most of the declines are reported as “generic”. So it’s not always possible to know exactly why a payment was declined. Especially for a payment that was processed with APM. For privacy and security, card issuers can only discuss the specifics of the declined payment with their cardholders but not with the merchant or PaySuper team. If you are sure that card information is correct, it’s perfect to have your customer contact his card issuer to get more information about the decline.\nRestriction on geographic location Some customers find that their cards have restrictions on the type of purchases they make. For example, purchases from certain countries or outside of their own can be disallowed. The decline rates is increased if your customer do a payment in a country differs from his card issued country.\nReducing the card issuer declines One of the approaches to reduce card issuer declines is to handle responses about incorrect card information (e.g., incorrect cardholder name or expiration date). Thus, PaySuper Checkout provides a set of error handlers that allows users to correct their data and proceed with the payment process.\nPaySuper Checkout collects additional customers’ data such as CVC/CVV and postal code that is strongly decreasing a card issuers’ suspicions of fraudulent activity. Moreover, using 3D Secure for payments authentication and a user’s billing address may decrease decline rates in many countries.\nPayment blocked due to suspected fraud PaySuper uses the self-developed fraud prevention system with cascade checks across our own and partners’ systems. Being the PCI DSS certified provider we can share data with other certified fraud protection systems to check any high-risk classified your customers’ payments. A blocked payment couldn’t be processed successfully and would be declined on an initial stage.\nFraud prevention system based both on black and white lists of customers details, score-based analysis and manages not only the payment admission reasons but also a level and need to use of 3D Secure for card payments.\nDecline codes    Code Description     01 System malfunction   02 Cancelled by customer   03 Declined by Antifraud   04 Declined by 3-D Secure   05 Only 3-D Secure transactions are allowed   06 3-D Secure availability is unknown   07 Limit reached   08 Requested operation is not supported   10 Declined by bank (reason not specified)   11 Common decline by bank   13 Insufficient funds   14 Card limit reached   15 Incorrect card data   16 Declined by bank’s antifraud   17 Bank’s malfunction   18 Connection problem   21 No payment was received (for BITCOIN payment method only)   22 Wrong payment was received (for BITCOIN payment method only)   23 Confirmations payment timeout (for BITCOIN payment method only)    Next steps Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Going live checklist\nYou can inspect this checklist before going live to ensure you\u0026rsquo;ve implemented all the significant setup steps.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":18,"href":"/docs/vat/","title":"VAT","content":" VAT for e-services of foreign companies What is VAT? VAT (a value-added tax) is a consumption tax placed on a product whenever value added at each stage of the supply chain, from production to the point of sale. You can only charge VAT if your business registered for VAT.\nMost countries regulate the VAT payments for companies established in this country as well as for foreign companies that supply services for customers from this country.\nWhat are electronically supplied services of foreign companies? Services supplied from abroad which are delivered over the Internet or an electronic network (supply games, website supply, supply of software and its updates and others).\nWhen buying electronically supplied services online, VAT is due. The seller will charge the VAT rate applicable in the country where the customer is established, has a permanent address or usually reside.\nFor instance, if a private person residing in Germany buys a game from an online store in France, according to the rules of VAT paid in the EU, the French company must charge from the buyer the VAT amount at German rates and has to pay its VAT to Germany.\nVAT rates Actual rates applied vary between countries and between certain types of products.\nYou can check the VAT rates applied in each country:\n   Country Tax currency Rate     Australia AUD 10%   Austria EUR 20%   Albania ALL 20%   Argentina ARS 21%   Armenia AMD 20%   Bahrain BHD 5%   Belarus BYN 20%   Belgium EUR 21%   Bulgaria EUR 20%   Brazil BRL 17%-19% *   United Kingdom EUR 20%   Hungary EUR 27%   Ghana GHC 12.5%   Germany EUR 19%   Greece EUR 24%   Denmark EUR 25%   Egypt EGP 14%   India INR 18%   Ireland EUR 23%   Iceland ISK 24%   Spain EUR 21%   Italy EUR 22%   Canada (Quebec) CAD 9.975%   Kenya KES 16%   Cyprus EUR 19%   Colombia COP 19%   Latvia EUR 21%   Lithuania EUR 21%   Liechtenstein CHF 7.7%   Luxembourg EUR 17%   Malta EUR 18%   Netherlands EUR 21%   New Zealand NZD 15%   Norway NOK 25%   UAE AED 5%   Poland EUR 23%   Portugal EUR 23%   Republic of Korea KRW 10%   Russia RUB 20%   Romania EUR 19%   Saudi Arabia SAR 5%   Serbia RSD 20%   Singapore SGD 7%   Slovakia EUR 20%   Slovenia EUR 22%   USA USD up to 20% *   Taiwan, China TWD 5%   Tanzania TZS 18%   Turkey TRY 18%   Uruguay UYU 22%   Finland EUR 24%   France EUR 20%   Croatia EUR 25%   Czech Republic EUR 21%   Switzerland CHF 7.7%   Sweden EUR 25%   Estonia EUR 20%   South Africa ZAR 15%   Japan JPY 8%    * - the rate depends on the state  Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();