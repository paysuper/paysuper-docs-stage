(function(){const pages=[{"idx":0,"href":"/docs/markdown/","title":"Example markdown","content":" Title with a line Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\nHeadings h1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading Notes  The note with padding example.\n Code { \u0026#34;id\u0026#34;: \u0026#34;5ca5124868add448289e432e\u0026#34;, \u0026#34;project_id\u0026#34;: \u0026#34;5be2e16701d96d00012d26c3\u0026#34;, \u0026#34;description\u0026#34;: { \u0026#34;en\u0026#34;: \u0026#34;GTA 3 description\u0026#34; } } { \u0026quot;id\u0026quot;: \u0026quot;5ca5124868add448289e432e\u0026quot;, \u0026quot;project_id\u0026quot;: \u0026quot;5be2e16701d96d00012d26c3\u0026quot;, \u0026quot;description\u0026quot;: { \u0026quot;en\u0026quot;: \u0026quot;GTA 3 description\u0026quot; } }  Tables    Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    Columns Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   Hints Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Lists  Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo  Buttons Buttons are styled links that can lead to local page or external link ad contain CSS styles.\n{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} Example  Get Home  Contribute  Expand Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample Default {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}  Expand ↕  Markdown content Lorem markdownum insigne\u0026hellip;    With Custom Label {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}  Custom Label ...  Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    Tabs Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example MacOS  MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n Linux  Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n Windows  Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n  KaTeX KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample {{\u0026lt; katex [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} x = \\begin{cases} a \u0026amp;\\text{if } b \\\\ c \u0026amp;\\text{if } d \\end{cases} {{\u0026lt; /katex \u0026gt;}}   \n$$ x = \\begin{cases} a \u0026\\text{if } b \\\\ c \u0026\\text{if } d \\end{cases} $$   Mermaid Chart Mermaid is library for generating svg charts and diagrams from text.\nExample {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} sequenceDiagram Alice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you? alt is sick Bob-\u0026gt;\u0026gt;Alice: Not so good :( else is well Bob-\u0026gt;\u0026gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-\u0026gt;\u0026gt;Alice: Thanks for asking end {{\u0026lt; /mermaid \u0026gt;}}   sequenceDiagram Alice-Bob: Hello Bob, how are you? alt is sick Bob-Alice: Not so good :( else is well Bob-Alice: Feeling fresh like a daisy end opt Extra response Bob-Alice: Thanks for asking end   Images   "},{"idx":1,"href":"/docs/glossary/","title":"Glossary","content":" Payment form: a Checkout Form\nPaySuper Admin entities and properties: a Project\na Product\na Project Secret key\nthe Banking info\nVirtual Currency\nGame Keys\nVirtual Items\na key-activated product\na virtual item\nan in-game currency\nPaySuper Admin pages: the Projects list page\nthe Project settings page\nthe Project Webhooks page\nTerms in lowercase: a payment\nan order\na token\nTerms in uppercase: PaySuper Checkout\nCompany Onboarding\nPaySuper JS SDK\nPaySuper API\nPaySuper\nPaySuper Dashboard\n"},{"idx":2,"href":"/docs/payments/fulfillment/","title":"After the payment","content":" Your customer gets an email with the receipt and an extra email with the purchased Product or Products as soon as the transaction is complete. If your customer has purchased several game-keys for different DRM platforms, they get an email per DRM platform with a game key and instructions on how to activate the key on the target DRM store. At the same time you see that transaction on the Dashboard in PaySuper Admin.\nYou can handle actions after your customer completes their payment.\nFulfilling purchases with webhooks PaySuper can send the payment.success webhook event to your server to notify you when a customer completes the payment. You can configure webhooks for your Projects in PaySuper Admin and handle them on your server.\nA webhook handler is a script on your server that handles the PaySuper events such as payment.success or payment.cancel. See all event types in [PaySuper API reference]().\nThese webhook events are signed to protect you from fraudlent activities. You can validate our signed webhooks by generating a signature and comparing it to the value of the Authorization http header value.\n** Webhook object can look like this: { \u0026#34;id\u0026#34;: \u0026#34;22d6d597-000f-5000-9000-145f6df21d6f\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;notification\u0026#34;, \u0026#34;event\u0026#34;: \u0026#34;payment.success\u0026#34;, \u0026#34;live\u0026#34;: true, \u0026#34;created_at\u0026#34;: \u0026#34;2018-07-10T14:27:54.691Z\u0026#34;, \u0026#34;expires_at\u0026#34;: null, \u0026#34;delivery_try\u0026#34;: 1, \u0026#34;object\u0026#34;: {} }\n   Name Type Description     id string Unique identifier for the object.   type string String representing the web hook’s type.   event string String representing the event`s type.   live boolean True is notification originated from the live environment.   created_at DateTime The date and time in ISO 8601 when an event has been created.   expires_at DateTime The date and time in ISO 8601 when the event stops trying to deliver.   delivery_try integer The current delivery try for this event   object object The object representing payload of event with given type. Objects of the same type share the same value.    "},{"idx":3,"href":"/docs/payments/","title":"Checkout Overview","content":" PaySuper Checkout PaySuper Checkout creates a secure PaySuper-hosted form that lets you collect payments with just a few lines of code. The Checkout Form loads near instantly and is designed to boost your paying conversion rate.\n  PaySuper Checkout features  Payment methods: VISA, Master Card, AMEX, JCB, China UnionPay, Bitcoin payments, Alipay, QIWI, Bank Wire Transfers. Payment types: Simple Checkout, Items Checkout. Authentication: Dynamic 3D Secure (ready for Strong Customer Authentication). Localization: Localized for 2 languages with 10 more translations coming soon. Email receipts: Automatic email receipts right to your customers\u0026rsquo; inbox. Automated calculations: Automatically calculates the taxes and VAT due on your orders. Conversion-optimized: The payment form loads instantly with a single-page layout.  Try now See how the Checkout Form looks and feels\nChoose a card payment method and enter one of the test cards to checkout in a test mode:\n3D Secure: 4000 0000 0000 0002\nNon 3D Secure: 4000 0000 0000 0077\nEnter arbitrary expiry date (the format is MM/YY), a Secure code (CVC/CVV, the format is 3 digits) and a cardholder name (the format is firstname lastname).\nTest Payment \n HOW IT WORKS\nTry out the payment sample or see the code on GitHub.\n  Getting Started To get started with PaySuper, choose your business model:\nSimple Checkout Simple Checkout is designed for payment orders with dynamical pricing, for example, stores that use its e-commerce engine for product management. Likewise, this option works well with non-product payments such as donations. In this mode, you specify the currency and the price, while the payment amount due for the end-user is calculated accordingly to the exchange rate if it differs from the specified order currency.\nProducts Checkout PaySuper Checkout provides several types of products which you specify in an order as a parameter type:\nGame Keys\nThis sales option is best suited to sale game keys for DRM platforms such as Steam, GOG, Uplay, Origin, PSN, XBOX Store, Nintendo Store, Itch.io, Epic Games Store. This feature allows you to sell any key-activated products (such as DLCs and expansion packs) that the target DRM platforms support.\nVirtual Items\nThis sales option enables you to sell your Virtual Items, like swords, guns, helmets and virtual currency packs.\nVirtual Currency\nVirtual Currency is an option to sell your in-game currency — gold, coins, etc. It allows you to sell customisable quantity of your currency.\nNext steps Continue with the Quick Start guide  Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":4,"href":"/docs/payments/sdk-integration/","title":"Client-side payment initialization","content":" Payment initialization on the client-side The client-side payment initialization makes it possible to integrate a Checkout Form into your website using only frontend code.\nIt’s easy to embed PaySuper JS SDK with just a few lines of Javascript code to start a payment process and display a purchase status finally whithout any server-side code.\n HOW IT WORKS\nTry out the payment sample or see the code on GitHub.\n  Notice that a pure client-side payment initialization is possible yet a special care must be taken. Your project identity could be used from any web-site to initiate payments without any additional checks or verifications from the PaySuper side. At the moment we\u0026rsquo;re working on an option to disable that kind of payment orders in the Project settings.  If your sales use cases are not filled, use the server-side payment initialization with PaySuper API instead.\nStep 1. Embed the Checkout Form To get started, include the following script tag on your website - always load it directly from https://cdn.pay.super.com:\n\u0026lt;script src=\u0026#34;https://cdn.pay.super.com/paysdk/latest/paysuper.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Step 2. Provide parameters Simple Checkout To create a Checkout Form for one-time payments it\u0026rsquo;s enough to have a Project ID and an acceptable price and currency.\nUse this sample code to create a PaySuper object with the required parameters for a simple checkout:\nconst paySuper = new PaySuper({ project: \u0026#39;5cd5624a06ae110001509186\u0026#39;, amount: 10, currency: \u0026#39;USD\u0026#39; });  Products Checkout If you\u0026rsquo;re selling such products such as key-activated products, virtual items or in-game currency, you can use this sample code with a defined product parameter:\nGame Key  const paySuper = new PaySuper({ project: \u0026#39;5cd5624a06ae110001509186\u0026#39;, products: [\u0026#39;5d7baee015ff7d0001b986a8\u0026#39;], type: \u0026#39;key\u0026#39; });   Virtual Item  const paySuper = new PaySuper({ project: \u0026#39;5cd5624a06ae110001509186\u0026#39;, products: [\u0026#39;5d848f484dd6a50001970479\u0026#39;, \u0026#39;5d8c7a219e362100013de214\u0026#39;], type: \u0026#39;product\u0026#39; });   Virtual Currency  ПРИМЕР КОДА ПРОСИТЬ У ДИМЫ или АНДРЕЯ кода реализуют\nconst paySuper = new PaySuper({ });    Full list of PaySuper parameters\nRemember to use your IDs for the project and products. You can find your IDs in your merchant account on the PaySuper Projects. Open your Project settings page, select the Product tab and click on the Product name. Copy the Project and Product IDs from the page URL.  Step 3. Display the Checkout Form This example offers a sample code that displays a PaySuper Checkout Form with a BUY button.\nEmbed as a modal window  \u0026lt;script\u0026gt; function buyItems() { const paySuper = new PaySuper({ project: \u0026#39;5cd5624a06ae110001509186\u0026#39;, amount: 10, currency: \u0026#39;USD\u0026#39; }); paySuper.renderModal(); } \u0026lt;/script\u0026gt; \u0026lt;button onclick=\u0026#34;buyItems()\u0026#34;\u0026gt;BUY\u0026lt;/button\u0026gt;  Embed as an iframe  \u0026lt;script\u0026gt; function buyItems() { const paySuper = new PaySuper({ project: \u0026#39;5cd5624a06ae110001509186\u0026#39;, amount: 10, currency: \u0026#39;USD\u0026#39; }); paySuper.renderPage(); } \u0026lt;/script\u0026gt; \u0026lt;button onclick=\u0026#34;buyItems()\u0026#34;\u0026gt;BUY\u0026lt;/button\u0026gt;   Step 4. Handle the purchase events paySuper.on(\u0026#39;paymentCompleted\u0026#39;, function() { // You can show a message that the payment is completed })  Full events list in the expected order of execution\nNext steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transaction log to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Customizing the Checkout\nLearn about the different ways you can customize your Checkout.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":5,"href":"/docs/payments/customization/","title":"Customizing Checkout","content":" Customizing Checkout Learn about the different ways you can customize your Checkout.\nLocalization The Checkout Form is localized to 2 languages with 10 more translations coming soon.\nYou can choose the complete set of supported languages for the project and products descriptions on the Project Settings page in your PaySuper Dashboard.\nPrefilling customer data Boost your payment conversion rate with a payment form pre-filled with your customer\u0026rsquo;s name and email. To have the payment form prefilled, you can generate a token to encrypt all required information about your customer\u0026rsquo;s intent to pay.\nSaving payment methods for future PaySuper can securely store your customer\u0026rsquo;s billing address and the payment method data to prefill the Checkout Form with. The customer has to agree for this to happen.\nCustomizing theme const paySuper = new PaySuper({ viewScheme: \u0026#39;light\u0026#39; });  Available options: dark (default), light.\nCustomizing the colors const paySuper = new PaySuper({ viewSchemeConfig: { // headerTextColor overrides the default value of the viewSchemeConfig object  headerTextColor: \u0026#39;#333333\u0026#39; } });  Available parameters of viewSchemeConfig\nNext steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transaction log to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Going live checklist\nYou can inspect this checklist before going live to ensure you\u0026rsquo;ve implemented all the significant setup steps.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":6,"href":"/docs/","title":"Docs","content":""},{"idx":7,"href":"/docs/payments/live/","title":"Going Live","content":" Below is a holistic view of the process from the very start to going live:  Complete the onboarding and fill in the info about your Projects and Products Implement PaySuper Checkout on your website Setup the webhooks on your backend Test that everything works fine in our sandbox We verify that you\u0026rsquo;re good to go live and flip the switch You can stop reading this text, instead do navigate to the Dashboard to see the first sales =)  Now let\u0026rsquo;s double check all the important details that you may have missed When you’re done with PaySuper Checkout integration and are thinking about going live, we suggest you refer to the points below to make sure you haven\u0026rsquo;t missed an important detail or two.\nTest/live API switch Webhooks verification tests on our backend PaySuper Admin - important settings "},{"idx":8,"href":"/docs/payments/token/","title":"Payment initialization with token","content":" Payment initialization with token A token is an encrypted string that represents certain details of your customer (such as the user ID, email and others), a game and purchase parameters.\nYou can create a token before your customer intents to pay and use it in the future payments. For instance, you can create the token after a user has signed up or has logged in to your website or a game client. When your customer wants to pay for something you redirect them to the PaySuper-hosted Checkout Form to instantly complete a purchase.\nToken-based features  Instantly redirect to a Checkout Form: Once you have created a token that stores the necessary customer data, you don\u0026rsquo;t need to request that data again from the customer. Instead you can display the PaySuper Checkout Form so the customer can conveniently confirm the purchase. This is useful when you can identify a customer in your system.\n The pre-filled information in a Checkout Form: The Checkout Form is pre-filled with the applicable information about your customer that it can get from the token.\n  You can follow these steps to create a Checkout Form:\nStep 1. Create a token on your server Send the POST /api/v1/tokens to receive an encrypted string. Learn more about the full list of parameters.\nRemember to add a Header X-API-SIGNATURE with a sha512 hash value that is a concatenation the request body and the Project Secret key found on the Project Webhooks page. Notice, the JSON format of the request body and in the hash must be the same.  Runkit  Run the script and view the response data:\n    cURL  Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;X-API-SIGNATURE: YOUR_SIGNATURE\u0026#39; -d \u0026#39;{ \u0026#34;settings\u0026#34;: { \u0026#34;project_id\u0026#34;: \u0026#34;YOUR_PROJECT_ID\u0026#34;, \u0026#34;amount\u0026#34;: 10, \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;simple\u0026#34; }, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;58799f2c2564296bd2cb\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;city\u0026#34;: \u0026#34;Almere\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;NL\u0026#34;, \u0026#34;postal_code\u0026#34;: \u0026#34;1326 PA\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Flevoland\u0026#34; }, \u0026#34;email\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;user.email@example.com\u0026#34;, \u0026#34;verified\u0026#34;: true } } }\u0026#39; \u0026#39;https://p1payapi.tst.protocol.one/api/v1/tokens\u0026#39;   Step 2. Create a Checkout Form with a token Open a Checkout Form by URL New browser window  Retrieve the response parameter payment_form_url from the previous step. It is the URL of PaySuper-hosted payment form.\nWhen your customer is ready to start a payment you can redirect the user to the URL in a new browser window.\n Iframe  Retrieve the response parameter payment_form_url from the previous step. It is the URL of a PaySuper-hosted payment form.\nEmbed the Checkout Form as an inline iframe by URL:\n\u0026lt;iframe src=\u0026#34;{payment_form_url}\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;  Standalone web-page  Retrieve the response parameter with id from the previous step. It is the ID of the created order.\nUse this code sample to open the Checkout Form as a standalone web-page with PaySuper JS SDK and replace YOUR_ORDER_ID in the formUrl with id value:\n\u0026lt;script\u0026gt; function buyItems() { const paySuper = new PaySuper({ formUrl: \u0026#39;https://order.pay.super.com/?order_id=YOUR_ORDER_ID\u0026#39; }); paySuper.renderPage(); } \u0026lt;/script\u0026gt; \u0026lt;button onclick=\u0026#34;buyItems()\u0026#34;\u0026gt;BUY\u0026lt;/button\u0026gt;   Note that the parameters used in the POST /api/v1/tokens request override the corresponding parameters in an order object.  Client-side payment initialization To integrate a Checkout Form you can follow the client-side payment initialization but instead pass a token parameter when creating a PaySuper object.\nIf your token contains user and order parameters then you can create a Checkout Form instance with just a single parameter:\nconst paySuper = new PaySuper({ token: \u0026#39;5cd5620f06ae110001509185\u0026#39; });  Server-side payment initialization To integrate a Checkout Form you can follow the server-side payment initialization with the token parameter.\nIf your token contains the user and order parameters then you can request a Checkout Form URL with just a single parameter:\nRunkit  Run the script and view the response data:\n    cURL  Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{ \u0026#34;token\u0026#34;: \u0026#34;YOUR_TOKEN\u0026#34; }\u0026#39; \u0026#39;https://p1payapi.tst.protocol.one/api/v1/order\u0026#39;   Next steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transaction log to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Customizing the Checkout\nLearn about the different ways you can customize your Checkout.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":9,"href":"/docs/api/","title":"PaySuper API Reference","content":""},{"idx":10,"href":"/","title":"PaySuper Documentation","content":" Documentation Getting started PaySuper is a payment service with an open source multifunctional toolkit that provides secure and immediate online payment transactions for the games industry.\n  Expand the market with online payments PaySuper enables you to accept payments easily and securely in 170+ countries. We support major payment systems such as Visa, MasterCard, JCB, China Union Pay, Alipay along with direct banking in Germany, Austria and Switzerland.\nFollow our development quick start to integrate online payments on your website or a game client.\nQuestions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":11,"href":"/docs/payments/quick-start/","title":"Quick start","content":" Payments Flow User Flow   Integration Flow   Quick start Step 1. Register a PaySuper Company account  Registration and onboarding     Sign up. Verify your email address with the delivered confirmation email. Follow the steps of a brief Welcome Onboarding. You are required to fill in the Banking info in Company Onboarding to be able create a project.  When you are ready to start selling you will need to fill in all your company details in Company Onboarding and sign the documents in the License Agreement.\nBefore confirming your application we manually check each new account to ensure that our platform is attended only by companies who are related to the gaming industry. This allows us focus on the relevant features and quality for our users.\n    Step 2. Set up a Project A single project is enough to start selling.\n Create a project    To create a Project:\n Open the Projects list page Click the Create Project button. Enter a Project Name. Click Create to redirect to the Project Settings page. Fill in the unique name and localised project descriptions. It will be mentioned in a payment form and different customer correspondence. Click Save.     Now you can initiate a simple checkout payment. It\u0026rsquo;s enough to create a payment order with your Project ID and an acceptable amount and currency.\nStep 3. Additional sales options If you want to sell products (as Game keys, Virtual items, Virtual currency) then easily add the necessary sales information about your products to the project.\n Add a Game key to the project    To add a Game key:\n Open your Project from the Projects list page Select the Sales options in the left sidebar and open the Game keys tab. Create a package to sell your game keys for associated DRM platforms. You can choose several platforms at once. Upload a pack of game keys for each DRM platform you selected. Enable the package and click Save.      Add a Virtual item to the project    To add a Virtual item:\n Open your Project from the Projects list page Select the Sales options in the left sidebar and open the Virtual items tab. Add a new item with localised text descriptions, SKU, prices and currencies. Enable and click Save.      Add a Virtual currency to the project    To add a Virtual currency:\n Open your Project from the Projects list page Select the Sales options in the left sidebar and open the Virtual currency tab. Fill in the unique name and localised project descriptions. Enable and click Save.     Step 4. Set up a Checkout Form Use Checkout to collect one-time payments or to sell products defined in the Project.\nPayment initialization with token You can encrypt details of your customer (such as the user ID, email and others), a game and purchase parameters. When your customer wants to pay for something you redirect them to the PaySuper-hosted Checkout Form to instantly complete a purchase.\nServer-side payment initialization You can also integrate on a server-side without PaySuper SJ SDK for other reasons. Checkout Form can be embedded as an iframe or new window.\nClient-side payment initialization The client-side payment initialization lets you accept online payments using only frontend code PaySuper JS SDK. The Checkout Form can be embedded as an iframe or modal window.\nStep 4. After the payment You can use webhooks or the Transaction log to accomplish the purchase. More details about handling the purchase fulfilment with PaySuper Checkout are available at After the payment.\nNext steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transaction log to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Customizing the Checkout\nLearn about the different ways you can customize your Checkout.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":12,"href":"/docs/payments/integration/","title":"Server-side payment initialization","content":" Payment initialization on the server-side The server-side payment initialization makes it possible to integrate a Checkout Form into your website or game client using PaySuper API. It’s easy to get a Checkout Form URL using an Order API request and render a payment form in a browser.\nYou can use PaySuper JS SDK for the client-side payment initialization to integrate a Checkout Form into your website only on the client-side.\nStep 1. Create a Checkout order on your server Send the POST /api/v1/order to receive an Order ID. Learn more about the full list of parameters that can be used for instance the redirect URLs for successful and failed payments.\nSimple Checkout To initiate simple checkout payments it\u0026rsquo;s enough to create a payment order with your Project ID and an acceptable amount and currency.\nUse this sample code to create an Order ID with the required parameters for a simple checkout:\nRunkit  Run the script and view the response data:\n    cURL  Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{ \u0026#34;project\u0026#34;: \u0026#34;YOUR_PROJECT_ID\u0026#34;, \u0026#34;amount\u0026#34;: 10, \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;simple\u0026#34; }\u0026#39; \u0026#39;https://p1payapi.tst.protocol.one/api/v1/order\u0026#39;   Remember to use your IDs for the project and products. You can find your IDs in your merchant account on the PaySuper Projects. Open your Project settings page, select the Product tab and click on the Product name. Copy the Project and Product IDs from the page URL.  Products Checkout If you\u0026rsquo;re selling products such as key-activated products, virtual items or in-game currency, you can use this sample code with a defined product parameter:\nGame Key  Run the script and view the response data:\n   Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{ \u0026#34;project\u0026#34;: \u0026#34;YOUR_PROJECT_ID\u0026#34;, \u0026#34;products\u0026#34;: [\u0026#34;YOUR_GAME_KEY_ID\u0026#34;], \u0026#34;type\u0026#34;: \u0026#34;key\u0026#34; }\u0026#39; \u0026#39;https://p1payapi.tst.protocol.one/api/v1/order\u0026#39;  Virtual Item  Run the script and view the response data:\n   Or try it with cURL to interact with the API over HTTP from your console:\ncurl -X POST -H \u0026#39;Content-Type: application/json\u0026#39; -d \u0026#39;{ \u0026#34;project\u0026#34;: \u0026#34;YOUR_PROJECT_ID\u0026#34;, \u0026#34;products\u0026#34;: [\u0026#34;YOUR_VIRTUAL_ITEM_ID_1\u0026#34;, \u0026#34;YOUR_VIRTUAL_ITEM_ID_2\u0026#34;], \u0026#34;type\u0026#34;: \u0026#34;product\u0026#34; }\u0026#39; \u0026#39;https://p1payapi.tst.protocol.one/api/v1/order\u0026#39;  Virtual Currency  Run the script and view the response data:\nRUNKIT\nOr try it with cURL to interact with the API over HTTP from your console:\n   Step 2. Display a Checkout Form New browser window  Retrieve the response parameter payment_form_url from the previous step. It is the URL of a PaySuper-hosted payment form.\nWhen your customer is ready to start a payment you can redirect the user to the URL in a new browser window.\n Iframe  Retrieve the response parameter payment_form_url from the previous step. It is the URL of a PaySuper-hosted payment form.\nEmbed the Checkout Form as an inline iframe by URL:\n\u0026lt;iframe src=\u0026#34;{payment_form_url}\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;  Standalone web-page  Retrieve the response parameter with id from the previous step. It is the ID of the created order.\nUse this code sample to open the Checkout Form as a standalone web-page with PaySuper JS SDK and replace YOUR_ORDER_ID in the formUrl with id value:\n\u0026lt;script\u0026gt; function buyItems() { const paySuper = new PaySuper({ formUrl: \u0026#39;https://order.pay.super.com/?order_id=YOUR_ORDER_ID\u0026#39; }); paySuper.renderPage(); } \u0026lt;/script\u0026gt; \u0026lt;button onclick=\u0026#34;buyItems()\u0026#34;\u0026gt;BUY\u0026lt;/button\u0026gt;   Next steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transaction log to accomplish the purchase.\n Testing the Checkout\nVerify that your integration with PaySuper Checkout works correctly. Our offered test cards can be used to create payments that produce defined responses for you to test your integration code.\n Customizing the Checkout\nLearn about the different ways you can customize your Checkout.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":13,"href":"/docs/payments/testing/","title":"Testing Checkout","content":" Testing the Payment Process The Payment Form integration should be tested in the Sandbox before going live.\nThe Sandbox provides full functionality but it only emulates processing, no actual bank transactions are made.\nWhen using PaySuper JS SDK ensure that:\n Handlers for the events are displayed properly. The PaySuper object is created with all required parameters or token.  Incase of using the PaySuper API in your server-side code ensure that:\n Authentication to the API provided with your Project API secret key found on the Project settings. All API errors are handled accurately. Webhooks contains properly URL.  Test card numbers To test a bank card payment in the Sandbox enter arbitrary expiry date (the format is MM/YY), a Secure code (CVC/CVV, the format is 3 digits) and a cardholder name (the format is firstname lastname).\nYou can also specify incorrect details (card number, expiration date, or CVV) in order to generate an error.  You will be redirected to the Sandbox page to select of the desired results the success or failed. After you click the result button the current page will be closed and you will be redirected to the Checkout Form to view the purchase status.\n Note, that when Merchant chooses to fail authentication, payment is always declined, no matter what PAN has been used.\n Use any of the following test card numbers:\n Note that Authorized cards must be used only to test antifraud system reaction with compulsory transfer payment to preauthorization.\n 3-D Secure test card 3-D Secure is emulated with a page that doesn’t require any password but only shows 2 buttons. One button is for successful authentication, another is for failed authentication.\nConfirmd\n 4000 0000 0000 0002    Declined\n 5555 5555 5555 4444    Authorized\n 4000 0000 0000 0044     Non 3-D Secure test card Confirmd\n 4000 0000 0000 0077    Declined\n 5555 5555 5555 4477    Authorized\n 4000 0000 0000 0051     Currencies You can choose a fixed set of currencies which will be actual for all products in your project on the Project settings page.\nSee the full list of currencies are supported for testing.\nWebhooks After the payments PaySuper can send you webhook events to your server. You can make a successful payment with a test card number and verify the resulting event data and ensure that your webhook\u0026rsquo;s endpoint is working and configured correctly.  GETTING STARTED\nConfigure Webhooks for your Project in PaySuper Dashbord and handle them on your server.\n  Next steps After the payment\nAfter a successful payment, you have to fulfil the customer’s purchase. You can use webhooks or the Transaction log to accomplish the purchase.\n Customizing the Checkout\nLearn about the different ways you can customize your Checkout.\n Going live checklist\nYou can inspect this checklist before going live to ensure you\u0026rsquo;ve implemented all the significant setup steps.\n Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":14,"href":"/docs/payments/currencies/","title":"Testing currencies","content":" Testing currencies    Currency Code Country and Currency     USD United States Dollar   EUR Euro Member Countries   GBP United Kingdom Pound   RUB Russia Ruble   BRL    JPY    IDR    MYR    PHP    SGD    THB    VND    KRW    TRY    MXN    CAD    AUD    NZD    NOK    PLN    CHF    CNY    INR    CLP    PEN    COP    ZAR    HKD    TWD    SAR    AED    ARS    ILS    KZT    QAR    CRC    HRK    CZK    RSD    RON    EGP    DKK    HUF    BHD    SEK     Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "},{"idx":15,"href":"/docs/about/webhooks/","title":"Webhooks","content":" Webhooks The PaySuper system can send you notifications for a set of events during the flow, such as creating new accounts or transaction flow, making payouts, and so on.\nThese notifications are sent as webhooks to the corresponding URLs configured on your Project settings page.\nIn most cases, webhooks are triggered by user actions on your website or back-end related events like refund a payment, notification about dispute and other.\nSet up webhooks  Configure URL in the Functional URL section on the Project settings page. Verify the webhook request. Respond with HTTP code 200 without a message body to acknowledge the receipt a webhook.  Webhook event types    Type Payload Description     payment.success Order Sent when a user completes a payment.   payment.chargeback Order Sent when a payment must be canceled for chargeback.   payment.refund Order Sent when a payment must be canceled for refund for any reasons.   payment.fraud Order Sent when a payment must be canceled for fraud protection system.   payment.cancel Order Sent when a payment must be canceled for cancel for any reasons.   item.replace Order Sent when a item of processed order must be replaced for any reasons.   user.validation User Check if a user exists in the external system.   payout.created Payout Sent when a payout report created by PaySuper.   payout.status Payout Sent when a payout request change they status for any reasons.    The Webhook object    Attribute Type Description     id string Unique identifier for the object.   type string String representing the webhook\u0026rsquo;s type.   event string String representing the event\u0026rsquo;s type.   live boolean Equals to true if notification originated from the live environment.   created_at DateTime The date and time in ISO 8601 when an event has been created.   expires_at DateTime The date and time in ISO 8601 when the event stops trying to deliver.   delivery_try integer The current delivery try for this event.   object object The object representing payload of event with a given type. Objects of the same type share the same value.    The Webhook object example For instance, this is the base object representing the webhook event payment.success:\n{ \u0026#34;id\u0026#34;: \u0026#34;b303ec344deca48af01f3412d51af2198207f5bfff549bbdfffac46d971fc725\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;notification\u0026#34;, \u0026#34;event\u0026#34;: \u0026#34;payment.success\u0026#34;, \u0026#34;live\u0026#34;: true, \u0026#34;created_at\u0026#34;: \u0026#34;2019-10-31T16:01:41Z\u0026#34;, \u0026#34;expires_at\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;delivery_try\u0026#34;: 0, \u0026#34;object\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;f29ab03a-c5f0-40db-a798-9deba14a9099\u0026#34;, \u0026#34;transaction\u0026#34;: \u0026#34;302212411\u0026#34;, \u0026#34;object\u0026#34;: \u0026#34;order\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;created\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Payment by order # 5dbb050f662d2d0001704b03\u0026#34;, \u0026#34;created_at\u0026#34;: { \u0026#34;seconds\u0026#34;: 1572537615, \u0026#34;nanos\u0026#34;: 242000000 }, \u0026#34;canceled_at\u0026#34;: { \u0026#34;seconds\u0026#34;: -62135596800 }, \u0026#34;canceled\u0026#34;: false, \u0026#34;cancellation_reason\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;refunded\u0026#34;: false, \u0026#34;refunded_at\u0026#34;: { \u0026#34;seconds\u0026#34;: -62135596800 }, \u0026#34;receipt_email\u0026#34;: \u0026#34;michael.kirpa@gmail.com\u0026#34;, \u0026#34;receipt_phone\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;receipt_number\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;receipt_url\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;agreement_version\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;agreement_accepted\u0026#34;: false, \u0026#34;notify_sale\u0026#34;: false, \u0026#34;notify_sale_email\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;issuer\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;embedded\u0026#34;: false }, \u0026#34;amount\u0026#34;: 0.12, \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;U3oFCwIOwRnQzfKZn58fnkzx3xnPGYdP\u0026#34;, \u0026#34;object\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;external_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;michael.kirpa@gmail.com\u0026#34;, \u0026#34;email_verified\u0026#34;: false, \u0026#34;phone\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;phone_verified\u0026#34;: false, \u0026#34;ip\u0026#34;: \u0026#34;80.91.180.90\u0026#34;, \u0026#34;locale\u0026#34;: \u0026#34;ru\u0026#34;, \u0026#34;address\u0026#34;: { \u0026#34;country\u0026#34;: \u0026#34;UA\u0026#34;, \u0026#34;city\u0026#34;: \u0026#34;Dublin\u0026#34;, \u0026#34;postal_code\u0026#34;: \u0026#34;D02\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;L\u0026#34; }, \u0026#34;metadata\u0026#34;: null, \u0026#34;notify_new_region\u0026#34;: false, \u0026#34;notify_new_region_email\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;billing_address\u0026#34;: { \u0026#34;country\u0026#34;: \u0026#34;AO\u0026#34; }, \u0026#34;tax\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;vat\u0026#34;, \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34; }, \u0026#34;method\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;VISA/MasterCard\u0026#34;, \u0026#34;external_id\u0026#34;: \u0026#34;BANKCARD\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;currency\u0026#34;: \u0026#34;USD\u0026#34;, \u0026#34;terminal_id\u0026#34;: \u0026#34;52195\u0026#34;, \u0026#34;secret\u0026#34;: \u0026#34;167CjmMJY2fl\u0026#34;, \u0026#34;secret_callback\u0026#34;: \u0026#34;wBR54pLIfo19\u0026#34; }, \u0026#34;payment_system_id\u0026#34;: \u0026#34;5be2d0b4b0b30d0007383ce5\u0026#34;, \u0026#34;saved\u0026#34;: false, \u0026#34;card\u0026#34;: { \u0026#34;first6\u0026#34;: \u0026#34;414943\u0026#34;, \u0026#34;last4\u0026#34;: \u0026#34;2348\u0026#34;, \u0026#34;masked\u0026#34;: \u0026#34;414943...2348\u0026#34;, \u0026#34;expiry_month\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;expiry_year\u0026#34;: \u0026#34;2021\u0026#34;, \u0026#34;brand\u0026#34;: \u0026#34;VISA\u0026#34;, \u0026#34;fingerprint\u0026#34;: \u0026#34;$2a$04$O5T96ZeHx27HbLw0eXNUjO1sj4y0nnPKLsXy5Kw49iLC/EXCFfUzq\u0026#34;, \u0026#34;secure3d\u0026#34;: true }, \u0026#34;wallet\u0026#34;: null, \u0026#34;crypto_currency\u0026#34;: null }, \u0026#34;items\u0026#34;: null, \u0026#34;refund\u0026#34;: null, \u0026#34;metadata\u0026#34;: null, \u0026#34;country\u0026#34;: \u0026#34;AO\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;simple\u0026#34;, \u0026#34;platform_id\u0026#34;: \u0026#34;\u0026#34; } } Verify the webhook PaySuper signs the webhook events it sends to your endpoint, allowing you to validate that they were not sent by a third-party and prevent hacker attacks.\nThe PaySuper API uses a Secret key to check a notification request. All API requests must be made over HTTPS. Calls made over a plain HTTP will fail. API requests without the authentication will also fail.\nYour Secret keys carry many privileges, so be sure to keep them secure! Do not share your Secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth.  To check the digital signature:\n1. Concatenate the request\u0026rsquo;s JSON body with your Project\u0026rsquo;s Secret key found on the Project Webhooks page.\n2. Apply SHA-256 hashing to the resulting string.\n3. Compare the digital signature with Authorization HTTP Header value in the received notification:\nPOST /your_endpoint HTTP/1.1 Host: your.host Accept: application/json Content-Type: application/json Authorization: Signature sh9b1r69bjqie88n5uizqcrerhee50dypsp195mh Questions? Sales Our salespeople are pleasant and friendly. Leave your contact details, and we\u0026rsquo;ll be back to you in no time.  Support We are always happy to help with a code, improve a guide or consider a feature.  GitHub The PaySuper Checkout Form, the JS SDK and even the server are available as a source code on our GitHub. You\u0026rsquo;re welcome to explore the code and help us make PaySuper even better.   Not a developer? Our engineers will help you integrate PaySuper into your existing e-commerce platform, a website or a game in the best possible way. If you want something very special and crazy custom yet don\u0026rsquo;t have a suitable programmer available nearby - talk to us! We won\u0026rsquo;t let down a PaySuper user. We will try to help you in every possible way. We can even hire a programmer for you! "}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();